name: OpenCog Orchestration Engine

on:
  schedule:
    # Run every hour to orchestrate PaystackOSS repositories
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Type of orchestration action'
        required: true
        default: 'analyze'
        type: choice
        options:
        - analyze
        - sync
        - health_check
        - security_scan
      target_repos:
        description: 'Target repositories (comma-separated, or "all")'
        required: false
        default: 'all'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ORG_NAME: PaystackOSS

jobs:
  opencog-orchestrator:
    name: OpenCog Action Selection & Planning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Orchestrator Repository
        uses: actions/checkout@v4
        
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install requests pyyaml jinja2 python-dateutil
          
      - name: Initialize OpenCog State
        id: init-state
        run: |
          echo "timestamp=$(date -u +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
          echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "action_type=${{ github.event.inputs.action_type || 'analyze' }}" >> $GITHUB_OUTPUT
          
      - name: OpenCog Action Selection
        id: action-selection
        run: |
          python3 .github/scripts/opencog_action_selector.py \
            --action-type "${{ steps.init-state.outputs.action_type }}" \
            --target-repos "${{ github.event.inputs.target_repos || 'all' }}" \
            --org "${{ env.ORG_NAME }}"
            
      - name: Execute Selected Actions
        id: execute-actions
        run: |
          python3 .github/scripts/opencog_executor.py \
            --actions-file "opencog_actions.json" \
            --org "${{ env.ORG_NAME }}"
            
      - name: Generate Orchestration Report
        run: |
          python3 .github/scripts/opencog_reporter.py \
            --run-id "${{ steps.init-state.outputs.run_id }}" \
            --timestamp "${{ steps.init-state.outputs.timestamp }}" \
            --results-file "orchestration_results.json"
            
      - name: Upload Orchestration Results
        uses: actions/upload-artifact@v4
        with:
          name: opencog-orchestration-${{ steps.init-state.outputs.timestamp }}
          path: |
            orchestration_results.json
            opencog_actions.json
            opencog_state.json
          retention-days: 30
          
      - name: Update Organization Profile
        if: success()
        run: |
          python3 .github/scripts/update_profile.py \
            --results-file "orchestration_results.json" \
            --profile-path "profile/README.md"

  notify-completion:
    name: Orchestration Completion Notification
    runs-on: ubuntu-latest
    needs: opencog-orchestrator
    if: always()
    
    steps:
      - name: Report Orchestration Status
        run: |
          if [ "${{ needs.opencog-orchestrator.result }}" == "success" ]; then
            echo "✅ OpenCog orchestration completed successfully"
          else
            echo "❌ OpenCog orchestration failed or was cancelled"
          fi
name: OpenCog Health Monitor

on:
  schedule:
    # Run daily health checks
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - comprehensive
        - security
        - activity
        - documentation

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ORG_NAME: PaystackOSS

jobs:
  health-monitoring:
    name: Repository Health Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
      actions: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install requests pyyaml matplotlib seaborn pandas
          
      - name: Run Health Checks
        id: health-check
        run: |
          python3 .github/scripts/opencog_action_selector.py \
            --action-type "${{ github.event.inputs.check_type || 'health_check' }}" \
            --target-repos "all" \
            --org "${{ env.ORG_NAME }}"
          
          python3 .github/scripts/opencog_executor.py \
            --actions-file "opencog_actions.json" \
            --org "${{ env.ORG_NAME }}"
            
      - name: Generate Health Report
        run: |
          python3 .github/scripts/opencog_reporter.py \
            --run-id "${{ github.run_id }}" \
            --timestamp "$(date -u +%Y%m%d_%H%M%S)" \
            --results-file "orchestration_results.json"
            
      - name: Create Health Dashboard
        run: |
          python3 .github/scripts/create_health_dashboard.py \
            --results-file "orchestration_results.json" \
            --output-dir "health_dashboard"
            
      - name: Upload Health Reports
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: |
            orchestration_results.json
            opencog_report_*.json
            health_dashboard/
          retention-days: 90
          
      - name: Check Health Thresholds
        id: threshold-check
        run: |
          python3 .github/scripts/check_health_thresholds.py \
            --results-file "orchestration_results.json" \
            --thresholds-file ".github/config/health_thresholds.yml"
            
      - name: Create Issue for Critical Issues
        if: steps.threshold-check.outputs.critical_issues == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('orchestration_results.json', 'utf8'));
            
            let issueBody = '## ðŸš¨ Critical Health Issues Detected\n\n';
            issueBody += 'The OpenCog health monitor has detected critical issues that require attention:\n\n';
            
            // Add issue details from results
            const summary = results.executive_summary || {};
            issueBody += `- **Success Rate**: ${summary.success_rate_percent || 0}%\n`;
            issueBody += `- **Failed Actions**: ${summary.failed_actions || 0}\n\n`;
            
            if (summary.critical_issues && summary.critical_issues.length > 0) {
              issueBody += '### Critical Issues:\n';
              summary.critical_issues.forEach((issue, index) => {
                issueBody += `${index + 1}. **${issue.action}**: ${issue.error}\n`;
              });
            }
            
            issueBody += '\n---\n';
            issueBody += `Generated by OpenCog Health Monitor on ${new Date().toISOString()}`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Critical Health Issues Detected',
              body: issueBody,
              labels: ['health-monitor', 'critical', 'automated']
            });

  notify-health-status:
    name: Health Status Notification
    runs-on: ubuntu-latest
    needs: health-monitoring
    if: always()
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download Health Results
        uses: actions/download-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: health_results/
          
      - name: Update Health Badge
        run: |
          # Create or update health status badge
          python3 .github/scripts/update_health_badge.py \
            --results-dir "health_results" \
            --badge-path ".github/badges/health.json"
            
      - name: Commit Health Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "OpenCog Health Monitor"
          
          if [[ -f ".github/badges/health.json" ]]; then
            git add .github/badges/health.json
            git commit -m "Update health status badge [skip ci]" || echo "No changes to commit"
            git push || echo "No changes to push"
          fi